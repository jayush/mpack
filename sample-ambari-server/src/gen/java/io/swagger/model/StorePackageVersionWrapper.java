/*
 * Apache Ambari - Ambari Stores API
 * Unified API for registering multiple management package store providers with Ambari and querying list of available packages across multiple management package store providers.  [Learn about Apache Ambari](https://ambari.apache.org/) 
 *
 * OpenAPI spec version: 1.0.0
 * Contact: dev@ambari.apache.org
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.model;

import java.util.Objects;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.annotation.JsonCreator;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import io.swagger.model.StoreAssetWrapper;
import io.swagger.model.StoreCompatiblePackage;
import io.swagger.model.StorePackageService;
import io.swagger.model.StorePackageVersion;
import java.util.ArrayList;
import java.util.List;

/**
 * StorePackageVersionWrapper
 */
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaJerseyServerCodegen", date = "2017-02-24T06:39:18.478Z")
public class StorePackageVersionWrapper   {
  @JsonProperty("href")
  private String href = null;

  @JsonProperty("PackageVersion")
  private StorePackageVersion packageVersion = null;

  @JsonProperty("mpack")
  private StoreAssetWrapper mpack = null;

  @JsonProperty("doc")
  private StoreAssetWrapper doc = null;

  @JsonProperty("services")
  private List<StorePackageService> services = new ArrayList<StorePackageService>();

  @JsonProperty("compatiblePackages")
  private List<StoreCompatiblePackage> compatiblePackages = new ArrayList<StoreCompatiblePackage>();

  public StorePackageVersionWrapper href(String href) {
    this.href = href;
    return this;
  }

   /**
   * Get href
   * @return href
  **/
  @JsonProperty("href")
  @ApiModelProperty(value = "")
  public String getHref() {
    return href;
  }

  public void setHref(String href) {
    this.href = href;
  }

  public StorePackageVersionWrapper packageVersion(StorePackageVersion packageVersion) {
    this.packageVersion = packageVersion;
    return this;
  }

   /**
   * Get packageVersion
   * @return packageVersion
  **/
  @JsonProperty("PackageVersion")
  @ApiModelProperty(value = "")
  public StorePackageVersion getPackageVersion() {
    return packageVersion;
  }

  public void setPackageVersion(StorePackageVersion packageVersion) {
    this.packageVersion = packageVersion;
  }

  public StorePackageVersionWrapper mpack(StoreAssetWrapper mpack) {
    this.mpack = mpack;
    return this;
  }

   /**
   * Get mpack
   * @return mpack
  **/
  @JsonProperty("mpack")
  @ApiModelProperty(value = "")
  public StoreAssetWrapper getMpack() {
    return mpack;
  }

  public void setMpack(StoreAssetWrapper mpack) {
    this.mpack = mpack;
  }

  public StorePackageVersionWrapper doc(StoreAssetWrapper doc) {
    this.doc = doc;
    return this;
  }

   /**
   * Get doc
   * @return doc
  **/
  @JsonProperty("doc")
  @ApiModelProperty(value = "")
  public StoreAssetWrapper getDoc() {
    return doc;
  }

  public void setDoc(StoreAssetWrapper doc) {
    this.doc = doc;
  }

  public StorePackageVersionWrapper services(List<StorePackageService> services) {
    this.services = services;
    return this;
  }

  public StorePackageVersionWrapper addServicesItem(StorePackageService servicesItem) {
    this.services.add(servicesItem);
    return this;
  }

   /**
   * Get services
   * @return services
  **/
  @JsonProperty("services")
  @ApiModelProperty(value = "")
  public List<StorePackageService> getServices() {
    return services;
  }

  public void setServices(List<StorePackageService> services) {
    this.services = services;
  }

  public StorePackageVersionWrapper compatiblePackages(List<StoreCompatiblePackage> compatiblePackages) {
    this.compatiblePackages = compatiblePackages;
    return this;
  }

  public StorePackageVersionWrapper addCompatiblePackagesItem(StoreCompatiblePackage compatiblePackagesItem) {
    this.compatiblePackages.add(compatiblePackagesItem);
    return this;
  }

   /**
   * Get compatiblePackages
   * @return compatiblePackages
  **/
  @JsonProperty("compatiblePackages")
  @ApiModelProperty(value = "")
  public List<StoreCompatiblePackage> getCompatiblePackages() {
    return compatiblePackages;
  }

  public void setCompatiblePackages(List<StoreCompatiblePackage> compatiblePackages) {
    this.compatiblePackages = compatiblePackages;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    StorePackageVersionWrapper storePackageVersionWrapper = (StorePackageVersionWrapper) o;
    return Objects.equals(this.href, storePackageVersionWrapper.href) &&
        Objects.equals(this.packageVersion, storePackageVersionWrapper.packageVersion) &&
        Objects.equals(this.mpack, storePackageVersionWrapper.mpack) &&
        Objects.equals(this.doc, storePackageVersionWrapper.doc) &&
        Objects.equals(this.services, storePackageVersionWrapper.services) &&
        Objects.equals(this.compatiblePackages, storePackageVersionWrapper.compatiblePackages);
  }

  @Override
  public int hashCode() {
    return Objects.hash(href, packageVersion, mpack, doc, services, compatiblePackages);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class StorePackageVersionWrapper {\n");
    
    sb.append("    href: ").append(toIndentedString(href)).append("\n");
    sb.append("    packageVersion: ").append(toIndentedString(packageVersion)).append("\n");
    sb.append("    mpack: ").append(toIndentedString(mpack)).append("\n");
    sb.append("    doc: ").append(toIndentedString(doc)).append("\n");
    sb.append("    services: ").append(toIndentedString(services)).append("\n");
    sb.append("    compatiblePackages: ").append(toIndentedString(compatiblePackages)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }
}

