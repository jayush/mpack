# Example YAML to get you started quickly.
# Be aware that YAML has indentation based scoping.
# Code completion support is available so start typing for available options.
swagger: '2.0'

# Package Store Provider API
info:
  version: "1.0.0"
  title: Apache Ambari - Management Pack Store Provider APIs
  description: |
    Management pack store provider APIs for Apache Ambari

    [Learn about Apache Ambari](https://ambari.apache.org/)
  contact:
    email: dev@ambari.apache.org
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
host: localhost:8080
basePath: /rest/v1
schemes:
  - http
paths:
  ######################################
  # API: getAssets
  # List assets
  ######################################
  /assets:
    # This is a HTTP operation
    get:
      tags:
        - asset
      summary:  |
        List assets
      description: Returns a list of assets
      operationId: getAssets
      produces:
        - application/json
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref : "#/definitions/AssetCollection"  
  ######################################
  # API: getAsset
  # Get asset
  ######################################
  /assets/{assetId}:
    get:
      tags:
        - asset
      summary: Get asset
      description: Returns an asset by id
      operationId: getAssetById
      produces:
        - application/json
      parameters:
        - in: path
          name: assetId
          description: ID of asset that needs to be fetched
          required: true
          type: integer
          format: int64
      responses:
        "404":
          description: Asset not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/AssetWrapper"
        "400":
          description: Invalid asset ID supplied                 
  ######################################
  # API: getPackages
  # List packages
  ######################################
  /packages:
    # This is a HTTP operation
    get:
      tags:
        - package    
      # Describe this verb here. Note: you can use markdown
      summary:  |
        List packages
      description: Returns a list of packages
      operationId: getPackages
      produces:
        - application/json
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref : "#/definitions/PackageCollection"
  ######################################
  # API: getPackage
  # Get package
  ######################################
  /packages/{packageName}:
    get:
      tags:
        - package
      summary: Get package
      description: Returns a package by name
      operationId: getPackageByName
      produces:
        - application/json
      parameters:
        - in: path
          name: packageName
          description: Name of package that needs to be fetched
          required: true
          type: string
      responses:
        "404":
          description: Package not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/PackageWrapper"
        "400":
          description: Invalid package name supplied     
  ######################################
  # API: getPackageVersions
  # List package versions
  ######################################
  /packages/{packageName}/versions:
    get:
      tags:
        - package-version
      summary: List package versions
      description: Returns list of package versions for a given package
      operationId: getPackageVersions
      produces:
        - application/json
      parameters:
        - in: path
          name: packageName
          description: Name of package that needs to be fetched
          required: true
          type: string
      responses:
        "404":
          description: Package not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/PackageVersionCollection"
        "400":
          description: Invalid package name supplied
  ######################################
  # API: getPackageVersion
  # Get package version
  ######################################
  /packages/{packageName}/versions/{packageVersion}:
    get:
      tags:
        - package-version
      summary: Get package version
      description: Returns package version information
      operationId: getPackageVersion
      produces:
        - application/json
      parameters:
        - in: path
          name: packageName
          description: Name of package that needs to be fetched
          required: true
          type: string
        - in: path
          name: packageVersion
          description: Version of package that needs to be fetched
          required: true
          type: string  
      responses:
        "404":
          description: Package version not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/PackageVersionWrapper"
        "400":
          description: Invalid package name or package version supplied   
          
  ######################################
  # API: getPackageVersion
  # Get package version
  ######################################
  /packages/{packageName}/versions/{packageVersion}/downloadUrl:
    get:
      tags:
        - package-version
      summary: Get package version management pack download url
      description: Get package version management pack download url
      operationId: getPackageVersionDownloadUrl
      produces:
        - application/json
      parameters:
        - in: path
          name: packageName
          description: Name of package that needs to be fetched
          required: true
          type: string
        - in: path
          name: packageVersion
          description: Version of package that needs to be fetched
          required: true
          type: string
        - in: query
          name: ambariVersion
          description: Ambari version to use to fetch compatible mpack
          required: true
          type: string
        - in: query
          name: operatingSystem
          description: Operating system type to use to fetch compatible mpack
          required: true
          type: string
      responses:
        "404":
          description: Package version not found
        "200":
          description: successful operation
          schema:
            $ref: "#/definitions/DownloadResponse"
        "400":
          description: Invalid package name or package version supplied             
      
definitions:
  AssetCollection:
    title: "AssetCollection"
    type: object
    properties:
      href: 
        type: string
      items:
        type: array
        description: "List of assets"
        items:
          $ref : "#/definitions/AssetWrapper"   
  AssetWrapper:
    title: "AssetWrapper"
    type: object
    properties:
      href:
        type: string
      Asset:
        $ref: "#/definitions/Asset"
  Asset:
    type: object
    properties:
      id:
        type: integer
        format: int64
      type:
        type: string        
      name:
        type: string
      description:
        type: string
      urls:
        type: string
        
  PackageCollection:
    title: "PackageCollection"
    type: object
    properties:
      href: 
        type: string
      items:
        type: array
        description: "List of packages"
        items:
          $ref : "#/definitions/PackageWrapper"    
  PackageWrapper:
    title: "PackageWrapper"
    type: object
    properties:
      href:
        type: string
      Package:
        $ref: "#/definitions/Package"
      versions:
        type: array
        items:
          $ref: "#/definitions/PackageVersionWrapper"   
  Package:
    type: object
    properties:
      name:
        type: string
      description:
        type: string
      logo:
        $ref: "#/definitions/AssetWrapper"
        
  PackageVersionCollection:
    title: "PackageVersionCollection"
    type: object
    properties:
      href: 
        type: string
      items:
        type: array
        description: "List of package versions"
        items:
          $ref : "#/definitions/PackageVersionWrapper"
  PackageVersionWrapper:
    title: "PackageVersionWrapper"
    type: object
    properties:
      href:
        type: string
      PackageVersion:
        $ref: "#/definitions/PackageVersion"
      mpack:
        $ref: "#/definitions/AssetWrapper"
      doc:
        $ref: "#/definitions/AssetWrapper"        
      services:
        type: array
        items:
          $ref: "#/definitions/PackageService"    
      compatiblePackages:
        type: array
        items:
          $ref: "#/definitions/CompatiblePackage"          
  PackageVersion:
    type: object
    properties:
      version:
        type: string
      buildNumber:
        type: string
        
  PackageService:
    type: object
    properties:
      name:
        type: string
      displayName:
        type: string
  CompatiblePackage:
    type: object
    properties:
      name:
        type: string
      minVersion:
        type: string
      maxVersion:
        type: string
  DownloadResponse:
    type: object
    properties:
      url:
        type: string
      
